from flask import (
    Blueprint, flash, g, redirect, render_template, request, url_for
)
from werkzeug.exceptions import abort

from flaskr.auth import login_required
from flaskr.db import get_db

bp = Blueprint('blog', __name__)

@bp.route('/')
@login_required
def index():
    db = get_db()
    posts = []
    try:
        cursor = db.cursor()
        cursor.execute(
            'SELECT p.id, title, body, created, author_id, username'
            ' FROM "post" p JOIN "user" u ON p.author_id = u.id'
            ' ORDER BY created DESC'
        )
        posts = cursor.fetchall()
    except Exception as e:
        flash(f'Error fetching posts: {e}', category='error')
        posts = []

    return render_template('blog/index.html', posts=posts)

@bp.route('/create', methods=('GET', 'POST'))
@login_required
def create():
    if request.method == 'POST':
        title = request.form['title']
        body = request.form['body']
        error = None

        if not title:
            error = 'Title is requried.'

        if error is not None:
            flash(error)
        else:
            db = get_db()
            try:
                cursor = db.cursor()
                cursor.execute(
                    'INSERT INTO "post" (title, body, author_id)'
                    ' VALUES (%s, %s, %s)',
                    (title, body, g.user['id'])
                )
                db.commit()
            except Exception as e:
                flash(f'Error saving blog post: {e}', category=('error'))
            else:
                return redirect(url_for('blog.index'))

    return render_template('blog/create.html')

def get_post(id, check_author=True):
    db = get_db()
    post = {}
    try:
        cursor = db.cursor()
        cursor.execute(
            'SELECT p.id, title, body, created, author_id, username'
            ' FROM "post" p JOIN "user" u on p.author_id = u.id'
            ' WHERE p.id = %s',
            (id,)
        )
        post = cursor.fetchone()
    except Exception as e:
        abort(500, f"Error getting post: {e}", category="error")
    else:
        if post is None:
            abort(404, f"Post id {id} doesn't exist.")

        if check_author and post['author_id'] != g.user['id']:
            abort(403)

    return post

@bp.route('/<int:id>/update', methods=('GET', 'POST'))
@login_required
def update(id):
    post = get_post(id)

    if request.method == 'POST':
        title = request.form.get('title')
        body = request.form.get('body')
        error = None

        if not title:
            error = 'Title is required.'

        if not body:
            error = 'Body is required.'

        if error is not None:
            flash(error)
        else:
            db = get_db()
            try:
                cursor = db.cursor()
                cursor.execute(
                    'UPDATE "post" SET title = %s, body = %s'
                    ' WHERE id = %s',
                    (title, body, id)
                )
                db.commit()
            except Exception as e:
                flash(f'Error updating blog post: {e}', category=("error"))
            else:
                return redirect(url_for('blog.index'))

    return render_template('blog/update.html', post=post)

@bp.route('/<int:id>/delete', methods=('POST',))
@login_required
def delete(id):
    get_post(id)
    db = get_db()
    cursor = db.cursor()
    cursor.execute('DELETE FROM "post" WHERE id = %s', (id,))
    return redirect(url_for('blog.index'))




